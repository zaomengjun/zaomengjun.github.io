<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hello World</title>
      <link href="/archives/4a17b156.html"/>
      <url>/archives/4a17b156.html</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
          <category> yaml </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
            <tag> world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>论文注意项</title>
      <link href="/archives/693208d8.html"/>
      <url>/archives/693208d8.html</url>
      
        <content type="html"><![CDATA[<p><strong>阅读论文</strong></p><p>我们要明白，无论是专业一还是专业二，老师除了看你基本知识是否掌握外，还要看你是否有自己的意识和思想。尤其是专业二，它更多的是考察你的整个知识框架和逻辑结构，而不是像专业一那样更多的是靠死记硬背。</p><p>因此，我们就能够明确我们阅读文献的目的：</p><p><strong>不需要精读，不需要理解文献中每一个名词、每一句话的意思。只需要拓宽自己的知识面，明白这篇文章大概讲了个什么，使自己在遇到“偏题”时可以有话写。</strong></p><p>那么，如何挑选文献呢？</p><p>又如何阅读呢？</p><p>具体操作如下：</p><p><strong>论文的选择</strong></p><p><strong>1.首选你目标导师/目标院校的论文。</strong>我上了近一年的研究生课程，我发现各位老师的共同点都是：<strong>在教学过程中会选定自己发表的某一篇论文或者某一个正在研究的课题，作为上课内容。</strong>因此，这些老师在参与出卷时，亦是如此。</p><p><strong>2.选择你所在领域里的权威期刊（2本左右即可）。</strong>帮助你了解该行业的热点，了解前沿在干些什么。</p><p><strong>阅读的方法</strong></p><p><strong>1.泛读。</strong>一篇论文从头到尾读完再归纳总是很耗费时间的，你没有那么多时间耗在论文上。</p><p><strong>如果是阅读目标导师/目标院校的论文，</strong>直接看标题+摘要，通篇浏览文章中的大标题明白文章涉及到了哪些内容（大标题的作用就是帮助你在写论述题的时候分点阐述，显得更有逻辑和层次），最后看结论（看看他解决了什么问题？提出了什么问题？）。</p><p><strong>如果是阅读权威期刊的论文，</strong>直接翻目录，选择热点话题（即反复出现的，频率在3-5次以上的），再将这些论文分门别类地读（如果没有时间，读一两篇就行，不一定非要全部读完，只要你知道有这个事就行）。阅读方法同上。</p><p><strong>2.做笔记。做笔记分为两种：</strong></p><p><strong>（1）总结、梳理框架。</strong>框架可以参考这样的格式：标题、摘要（自己概述，不要全写）、大小标题、结论。</p><p><strong>（2）勾画重点。</strong>比如某一段看起来很好用的话语，写上去能让你的论述题增光添彩，看起来更加学术化；比如某一个比较新颖的观点；比如某一句让你明白原先并不理解的知识点的阐述……</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研数学拦路虎</title>
      <link href="/archives/b0b755d5.html"/>
      <url>/archives/b0b755d5.html</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/%E6%95%99%E8%AE%AD1.png"></p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/%E6%95%99%E8%AE%AD2.png"></p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>准研究生必看指南</title>
      <link href="/archives/776ac2df.html"/>
      <url>/archives/776ac2df.html</url>
      
        <content type="html"><![CDATA[<p>你现在可以考虑考虑：你是否要读博？你的工作意向是什么？</p><p>考虑好了后，你可以规划自己的研究生生活了。</p><p>如果你想要读博，那你的研究生生活重心肯定就在学术上，包括你的论文、课题等等。由于我不读博，所以在这一点上无法给你们参考性意见，这篇文章对你们的帮助性也不是很大。需要你们自己斟酌。</p><p>如果你想毕业后直接工作，那你的研究生生活重心就不要全部扑在学术上了，应该分一些心思在专业技能甚至学生会活动上面（我当初也对学生会活动是不屑一顾的态度，现在发现其实有时间参加还是尽量参加这些活动）。</p><p><strong>争取拿各种奖状</strong></p><p>我们在研究生阶段拿到的很多奖状并没有太大含金量，比如什么优秀共青团员、优秀干部等等，这一类没有证书编号的奖状其实在工作阶段的认可度不会很大，<strong>但是！！它能够帮助你拿奖学金！！用人单位会看奖学金！****而且奖学金奖状是有编号的！</strong>我这学期拿了一些奖状 ，包括院级校级的，只有奖学金有证书编号。</p><p>绝大多数的学校都是看你的论文、专业课成绩、奖状来评奖学金的。奖学金不仅仅是钱的问题，更重要的是它是你以后去面试的敲门砖。现在有些用人单位在设置招聘条件的时候，直接会在招聘信息上表明“<strong>获得研究生学业奖学金一等奖”。</strong></p><p>那么，如何拿到奖状呢？</p><p><strong>参加学生会。</strong></p><p>大家不要瞧不起学生会或者觉得它的工作太繁琐你不想做，这是你熟悉研究生辅导员、各导师、各领导最快的方式。这意味着，到时候评优评奖大家首先就会考虑你。你想想，在评奖的时候，辅导员是选择一个不熟悉的学生还是选择一个辅助他工作常常见到的学生呢？</p><p>加入学生会除了评奖以外，还能够让你了解到更多的内部消息。比如以后的研究生毕业流程、各导师的上课要求习性等等。</p><p>最好的是加入团支部（你要是有能力能加入党支部更好），因为这更容易你入党，如果你以后要考公的话这一点很占优势。</p><p>再者就是<strong>积极参加各种活动。</strong>什么学术论文，创新创业大赛，互联网大赛，寝室文化节……<br>最后就是关注其他的一些社会活动。研究生比较关注志愿者这一块，比如博物馆志愿者，抗疫志愿者等等，多多参加社会实践活动，这些志愿者证明也会有帮助的。</p><p>大家记住，<strong>一定是要在不影响学习的情况下，参加这些活动拿奖状，这些奖状是为了你拿奖学金服务的。</strong></p><hr><p><strong>一些小建议</strong></p><p>我给大家说一下我的研究生安排。</p><p>我是三年专硕，毕业要求是一篇小论文和毕业论文。我以后的意向工作招聘条件是：研究生一等奖学金和师范技能。</p><p>根据这些要求，我对自己做了如下安排：<br>上午：补充自己的专业基础知识<br>下午再阅读专业相关的论文2篇，寻找小论文的内容和毕业论文的方向。在阅读过程中做笔记，列出论文框架并写下论文疑惑，明天再阅读疑惑相关的论文。</p><p>晚上：看看自己感兴趣的“闲书”，其实也是和专业相关的。还有时间的话就看部电影，因为这些东西其实都是融会贯通的，很多知识也可以在其他地方学到，比如逛博物馆、看电影等等。</p><hr><p>因为每个学校的评奖学金、毕业要求不一样，所以这些东西需要你们提前和师姐师兄、导师沟通，问问进哪个部门比较好？哪个奖项加分比较多等等。</p><p>可能在你们看起来，这篇推文很功利，说实话我自己也是这么认为。但是真的是没办法，你不功利一点以后毕业找工作别人就不要你。有时候空有一腔热血和抱负，却卡在了面试门槛这里。</p><p>大家要多和别人交流，交换信息～不要封闭自己埋头苦干</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>租房那些事</title>
      <link href="/archives/cb5b4747.html"/>
      <url>/archives/cb5b4747.html</url>
      
        <content type="html"><![CDATA[<h2 id="租房需谨慎"><a href="#租房需谨慎" class="headerlink" title="租房需谨慎"></a>租房需谨慎</h2><h3 id="要注意的点："><a href="#要注意的点：" class="headerlink" title="要注意的点："></a>要注意的点：</h3><ol><li><strong>中介费可以打折</strong>（85折    话术：‘我不是第一次租房了，我知道可以打折，这样好不好，你的中介费我知道能打折，但是咱就不打折了，但是能不能帮我记得小忙第一个起租日能不能帮我晚一点、钥匙能不能给我早一点，你空这不也空着吗，又或者是给我换点东西、再给我配点东西’）</li><li>通勤时间、周围环境要好、外卖要多（周边配置）</li><li>性价比 房租在工资1/4（租房价格）</li><li>户型结构和装修</li><li>合租的室友、楼层和噪音（邻里关系）</li><li>朝向、拒绝西晒（房屋本身）</li><li>房东的印象（房东相处）</li><li>自如、链家租房平台可以参考一下（适用于过渡性要求，不适合长期居住，长期居住最终还是会不满足的，因为它真的是各方面的问题，就是省心但是贵）</li></ol><h3 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h3><blockquote><p>朝西的房子不要上午看</p><p>采光不要的房子不要晚上看</p><p>朝东的房子不要上午看</p></blockquote><h3 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h3><p>有东西坏了采取的措施：</p><p>先自己查一下价格，告诉他这坏了怎么坏了，要是自己弄坏了的，那我就花钱自己修了，非人为坏了的，拿就拍照片或者怎么着告诉房东，同时也要对房东说，你可能就比较忙，不用你单独跑一趟，我查了一下，网上是修一下上门多少钱，我就截图发给他，我说这个你要行的话，我就找师傅上门来修，回头我付了，付完之后你看你是转给我，还是我下次房租里面给它扣掉</p><p>不建议租老房子，像在小城市的话就是这样子，就是其他的可能我没有什么特别多的，老房子可能会有一些很麻烦的问题（漏雨漏水、蟑螂、设备老旧，不能在网上交水电费，你还必须得去营业厅去缴纳）</p><p>不建议租高层 + 一梯多户比如你上班卡点出门了或者你就等那一个电梯其实挺痛苦的、挺耽误事的（五户两梯是上限了，除非你错峰上下班）</p><p>如果是要租公寓的话，一定要看好是不是商用水电</p><p>不建议租没有装修过的公寓，可能出现上下楼一直在装修，电梯会经常有装修工人在里面出入，每层楼都要停几分钟直接给你带来的后果就是必须要等电梯十几二十分钟</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学车</title>
      <link href="/archives/ded3615c.html"/>
      <url>/archives/ded3615c.html</url>
      
        <content type="html"><![CDATA[<h3 id="科目三"><a href="#科目三" class="headerlink" title="科目三"></a>科目三</h3><h4 id="电子车灯光模拟"><a href="#电子车灯光模拟" class="headerlink" title="电子车灯光模拟"></a>电子车灯光模拟</h4><p>开始，下面将进行模拟夜间行驶场景灯光使用的考试，请按我的指令在5秒内做出相应的灯光操作。</p><table><thead><tr><th align="center">请开启前照灯</th><th>近光灯</th></tr></thead><tbody><tr><td align="center">同方向近距离跟车行驶时</td><td>近光灯</td></tr><tr><td align="center">与机动车会车</td><td>近光灯</td></tr><tr><td align="center">通过路口时</td><td>近光灯</td></tr><tr><td align="center">在有路灯照明良好的道路上行驶时</td><td>近光灯</td></tr><tr><td align="center">在有信号灯控制的路口转弯时</td><td>近光灯</td></tr><tr><td align="center">在无信号灯控制的路口转弯时</td><td>远、近光交替，闪光</td></tr><tr><td align="center">夜间通过急弯、坡路、拱桥、人行横道</td><td>远、近光交替，闪光</td></tr><tr><td align="center">超越前方车辆时</td><td>远、近光交替，闪光</td></tr><tr><td align="center">车辆驶入无照明、照明不良的道路时</td><td>远光灯</td></tr><tr><td align="center">在路边停车时在路边停车时</td><td>示廓灯、危险警示灯</td></tr></tbody></table><h4 id="直线行驶"><a href="#直线行驶" class="headerlink" title="直线行驶"></a>直线行驶</h4><h5 id="一号线"><a href="#一号线" class="headerlink" title="一号线"></a>一号线</h5><blockquote><ol><li>起步（按喇叭、打转向）</li><li>直线行驶</li><li>会车（点两下刹车、套右边虚线10-15公分）</li><li>向右拐（按喇叭、点刹车、左右看、打转向）</li><li>超车（686）</li><li>加减档</li><li>路口直行（按喇叭、点刹车、左右看）</li><li>掉头（点刹车、打转向）</li><li>公交站台（点两下刹车）</li><li>路口直行（按喇叭、点刹车、左右看）</li><li>公交站台（点两下刹车）</li><li>学校区域（点两下刹车）</li><li>向右拐（按喇叭、点刹车、左右看、打转向）</li><li>变道（646）</li><li>靠边停车（打转向、减一档、离边缘线20-30公分、拉手刹、回空档、松离合、回转向、熄火、解安全带、开车门下车、关车门）</li></ol></blockquote><h5 id="二号线"><a href="#二号线" class="headerlink" title="二号线"></a>二号线</h5><blockquote><ol><li>起步（按喇叭、打转向）</li><li>直线行驶</li><li>会车（点两下刹车、套右边虚线10-15公分）</li><li>向左拐（按喇叭、点刹车、左右看、打转向）</li><li>加减档</li><li>路口直行（按喇叭、点刹车、左右看）</li><li>按喇叭、点刹车、掉头</li><li>路口直行（按喇叭、点刹车、左右看）</li><li>点刹车、公交站台</li><li>点刹车、学校区域</li><li>向右拐（按喇叭、点刹车、左右看、打转向、向右拐）</li><li>超车（686）</li><li>变道（646）</li><li>靠边停车（打转向、减一档、离边缘线20-30公分、拉手刹、回空档、松离合、回转向、熄火、解安全带、开车门下车、关车门）</li></ol></blockquote><h5 id="三号线"><a href="#三号线" class="headerlink" title="三号线"></a>三号线</h5><blockquote><ol><li>起步（按喇叭、打转向）</li><li>直线行驶</li><li>点两下刹车、公交站台</li><li>向左拐（按喇叭、点刹车、左右看、打转向、向左拐）</li><li>点两下刹车、公交站台</li><li>点两下刹车会车、套右边虚线10-15公分</li><li>路口直行（按喇叭、点刹车、左右看）</li><li>点两下刹车、学校区域</li><li>点两下刹车、打转向、掉头</li><li>路口直行（按喇叭、点刹车、左右看）</li><li>超车（686）</li><li>加减档</li><li>向右拐（按喇叭、点刹车、左右看、打转向）</li><li>点两下刹车、公交站台</li><li>变道（646）</li><li>靠边停车（打转向、减一档、离边缘线20-30公分、拉手刹、回空档、松离合、回转向、熄火、解安全带、开车门下车、关车门）</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型中的TEKV</title>
      <link href="/archives/e0700ddd.html"/>
      <url>/archives/e0700ddd.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许开发者在编译时检测到非法的类型。</p><p>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。</p><h2 id="泛型带来的好处"><a href="#泛型带来的好处" class="headerlink" title="泛型带来的好处"></a>泛型带来的好处</h2><p>在没有泛型的情况的下，通过对类型 Object 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是本身就是一个安全隐患。</p><p>那么泛型的好处就是在编译的时候能够检查类型安全，并且所有的强制转换都是自动和隐式的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class GlmapperGeneric&lt;T&gt; &#123;</span><br><span class="line">  private T t;</span><br><span class="line">    public void set(T t) &#123; this.t = t; &#125;</span><br><span class="line">    public T get() &#123; return t; &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // do nothing</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">    * 不指定类型</span><br><span class="line">    */</span><br><span class="line">  public void noSpecifyType()&#123;</span><br><span class="line">    GlmapperGeneric glmapperGeneric = new GlmapperGeneric();</span><br><span class="line">    glmapperGeneric.set(&quot;test&quot;);</span><br><span class="line">    // 需要强制类型转换</span><br><span class="line">    String test = (String) glmapperGeneric.get();</span><br><span class="line">    System.out.println(test);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">    * 指定类型</span><br><span class="line">    */</span><br><span class="line">  public void specifyType()&#123;</span><br><span class="line">    GlmapperGeneric&lt;String&gt; glmapperGeneric = new GlmapperGeneric();</span><br><span class="line">    glmapperGeneric.set(&quot;test&quot;);</span><br><span class="line">    // 不需要强制类型转换</span><br><span class="line">    String test = glmapperGeneric.get();</span><br><span class="line">    System.out.println(test);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码中的 specifyType 方法中 省去了强制转换，可以在编译时候检查类型安全，可以用在类，方法，接口上。</p><h2 id="泛型中通配符"><a href="#泛型中通配符" class="headerlink" title="泛型中通配符"></a>泛型中通配符</h2><p>我们在定义泛型类，泛型方法，泛型接口的时候经常会碰见很多不同的通配符，比如 T，E，K，V 等等，这些通配符又都是什么意思呢？</p><h3 id="常用的-T，E，K，V，？"><a href="#常用的-T，E，K，V，？" class="headerlink" title="常用的 T，E，K，V，？"></a>常用的 T，E，K，V，？</h3><p>本质上这些个都是通配符，没啥区别，只不过是编码时的一种约定俗成的东西。比如上述代码中的 T ，我们可以换成 A-Z 之间的任何一个 字母都可以，并不会影响程序的正常运行，但是如果换成其他的字母代替 T ，在可读性上可能会弱一些。<strong>通常情况下，T，E，K，V，？是这样约定的：</strong></p><ul><li>？表示不确定的 java 类型</li><li>T (type) 表示具体的一个java类型</li><li>K V (key value) 分别代表java键值中的Key Value</li><li>E (element) 代表Element</li></ul><h3 id="？无界通配符"><a href="#？无界通配符" class="headerlink" title="？无界通配符"></a>？无界通配符</h3><p>先从一个小例子看起，原文在 这里 。</p><p>我有一个父类 Animal 和几个子类，如狗、猫等，现在我需要一个动物的列表，我的第一个想法是像这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Animal&gt; listAnimals</span><br></pre></td></tr></table></figure><p>但是老板的想法确实这样的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;? extends Animal&gt; listAnimals</span><br></pre></td></tr></table></figure><p>为什么要使用通配符而不是简单的泛型呢？通配符其实在声明局部变量时是没有什么意义的，但是当你为一个方法声明一个参数时，它是非常重要的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">static int countLegs (List&lt;? extends Animal &gt; animals ) &#123;</span><br><span class="line">    int retVal = 0;</span><br><span class="line">    for ( Animal animal : animals )</span><br><span class="line">    &#123;</span><br><span class="line">        retVal += animal.countLegs();</span><br><span class="line">    &#125;</span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int countLegs1 (List&lt; Animal &gt; animals )&#123;</span><br><span class="line">    int retVal = 0;</span><br><span class="line">    for ( Animal animal : animals )</span><br><span class="line">    &#123;</span><br><span class="line">        retVal += animal.countLegs();</span><br><span class="line">    &#125;</span><br><span class="line">    return retVal;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;Dog&gt; dogs = new ArrayList&lt;&gt;();</span><br><span class="line">  // 不会报错</span><br><span class="line">    countLegs( dogs );</span><br><span class="line"> // 报错</span><br><span class="line">    countLegs1(dogs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当调用 countLegs1 时，就会飘红，提示的错误信息如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/1.jpg"></p><p>所以，对于不确定或者不关心实际要操作的类型，可以使用无限制通配符（尖括号里一个问号，即 &lt;?&gt; ），表示可以持有任何类型。像 countLegs 方法中，限定了上届，但是不关心具体类型是什么，所以对于传入的 Animal 的所有子类都可以支持，并且不会报错。而 countLegs1 就不行。</p><h3 id="上界通配符-lt-extends-E-gt"><a href="#上界通配符-lt-extends-E-gt" class="headerlink" title="上界通配符 &lt; ? extends E&gt;"></a>上界通配符 &lt; ? extends E&gt;</h3><blockquote><p>上届：用 extends 关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类。</p></blockquote><p>在类型参数中使用 extends 表示这个泛型中的参数必须是 E 或者 E 的子类，这样有两个好处：</p><ul><li>如果传入的类型不是 E 或者 E 的子类，编译不成功</li><li>泛型中可以使用 E 的方法，要不然还得强转成 E 才能使用</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private &lt;K extends A, E extends B&gt; E test(K arg1, E arg2)&#123;</span><br><span class="line">    E result = arg2;</span><br><span class="line">    arg2.compareTo(arg1);</span><br><span class="line">    //.....</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类型参数列表中如果有多个类型参数上限，用逗号分开</p></blockquote><h3 id="下界通配符-lt-super-E-gt"><a href="#下界通配符-lt-super-E-gt" class="headerlink" title="下界通配符 &lt; ? super E&gt;"></a>下界通配符 &lt; ? super E&gt;</h3><blockquote><p>下界: 用 super 进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至 Object</p></blockquote><p>在类型参数中使用 super 表示这个泛型中的参数必须是 E 或者 E 的父类。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">private &lt;T&gt; void test(List&lt;? super T&gt; dst, List&lt;T&gt; src)&#123;</span><br><span class="line">    for (T t : src) &#123;</span><br><span class="line">        dst.add(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    List&lt;Dog&gt; dogs = new ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Animal&gt; animals = new ArrayList&lt;&gt;();</span><br><span class="line">    new Test3().test(animals,dogs);</span><br><span class="line">&#125;</span><br><span class="line">// Dog 是 Animal 的子类</span><br><span class="line">class Dog extends Animal &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dst 类型 “大于等于” src 的类型，这里的“大于等于”是指 dst 表示的范围比 src 要大，因此装得下 dst 的容器也就能装 src 。</p><h3 id="？和-T-的区别"><a href="#？和-T-的区别" class="headerlink" title="？和 T 的区别"></a>？和 T 的区别</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//指定集合元素只能是T类型</span><br><span class="line">List&lt;T&gt; list = new Arraylist&lt;T&gt;();</span><br><span class="line">//指定集合元素可以是任意类型，这种没有意义，一般是方法中，只是为了说明用法</span><br><span class="line">List&lt;?&gt; list = new Arraylist&lt;?&gt;();</span><br></pre></td></tr></table></figure><p>？和 T 都表示不确定的类型，区别在于我们可以对 T 进行操作，但是对 ？不行，比如如下这种 ：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 可以</span><br><span class="line">T t = operate();</span><br><span class="line"></span><br><span class="line">// 不可以</span><br><span class="line">？car = operate();</span><br></pre></td></tr></table></figure><p>简单总结下：</p><p>T 是一个 确定的 类型，通常用于泛型类和泛型方法的定义，？是一个 不确定 的类型，通常用于泛型方法的调用代码和形参，不能用于定义类和泛型方法。</p><h4 id="区别1：通过-T-来-确保-泛型参数的一致性"><a href="#区别1：通过-T-来-确保-泛型参数的一致性" class="headerlink" title="区别1：通过 T 来 确保 泛型参数的一致性"></a>区别1：通过 T 来 确保 泛型参数的一致性</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 通过 T 来 确保 泛型参数的一致性</span><br><span class="line">public &lt;T extends Number&gt; void</span><br><span class="line">test(List&lt;T&gt; dest, List&lt;T&gt; src)</span><br><span class="line"></span><br><span class="line">//通配符是 不确定的，所以这个方法不能保证两个 List 具有相同的元素类型</span><br><span class="line">public void</span><br><span class="line">test(List&lt;? extends Number&gt; dest, List&lt;? extends Number&gt; src)</span><br></pre></td></tr></table></figure><p>像下面的代码中，约定的 T 是 Number 的子类才可以，但是申明时是用的 String ，所以就会飘红报错。</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/2.jpg"></p><p>不能保证两个 List 具有相同的元素类型的情况</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GlmapperGeneric&lt;String&gt; glmapperGeneric = new GlmapperGeneric&lt;&gt;();</span><br><span class="line">List&lt;String&gt; dest = new ArrayList&lt;&gt;();</span><br><span class="line">List&lt;Number&gt; src = new ArrayList&lt;&gt;();</span><br><span class="line">glmapperGeneric.testNon(dest,src);</span><br></pre></td></tr></table></figure><p>上面的代码在编译器并不会报错，但是当进入到 testNon 方法内部操作时（比如赋值），对于 dest 和 src 而言，就还是需要进行类型转换。</p><h4 id="区别2：类型参数可以多重限定而通配符不行"><a href="#区别2：类型参数可以多重限定而通配符不行" class="headerlink" title="区别2：类型参数可以多重限定而通配符不行"></a>区别2：类型参数可以多重限定而通配符不行</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class MultiLimit implements MultiLimitInterfaceA , MultiLimitInterfaceB&#123;</span><br><span class="line">// 使用“&amp;”符号设定多重边界（Multi Bounds）</span><br><span class="line">    public static&lt;T extends MultiLimitInterfaceA &amp; MultiLimitInterfaceB&gt; void test(T t)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//接口A</span><br><span class="line">interface MultiLimitInterfaceA &#123;&#125;</span><br><span class="line">//接口B</span><br><span class="line"> interface MultiLimitInterfaceB &#123;&#125;</span><br></pre></td></tr></table></figure><p>使用 &amp; 符号设定多重边界（Multi Bounds)，指定泛型类型 T 必须是 MultiLimitInterfaceA 和 MultiLimitInterfaceB 的共有子类型，此时变量 t 就具有了所有限定的方法和属性。对于通配符来说，因为它不是一个确定的类型，所以不能进行多重限定。</p><h4 id="区别3：通配符可以使用超类限定而类型参数不行"><a href="#区别3：通配符可以使用超类限定而类型参数不行" class="headerlink" title="区别3：通配符可以使用超类限定而类型参数不行"></a>区别3：通配符可以使用超类限定而类型参数不行</h4><p>类型参数 T 只具有 一种 类型限定方式：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T extends A</span><br></pre></td></tr></table></figure><p>但是通配符 ? 可以进行 两种限定：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">? extends A</span><br><span class="line">? super A</span><br></pre></td></tr></table></figure><h2 id="Class-lt-T-gt-和-Class-lt-gt-区别"><a href="#Class-lt-T-gt-和-Class-lt-gt-区别" class="headerlink" title="Class&lt;T&gt;和 Class&lt;?&gt;区别"></a><code>Class&lt;T&gt;</code>和 <code>Class&lt;?&gt;</code>区别</h2><p>前面介绍了 ？和 T 的区别，那么对于，<code>Class&lt;T&gt;</code>和 <code>&lt;Class&lt;?&gt;</code>又有什么区别呢？<code>Class&lt;T&gt;</code>和 <code>Class&lt;?&gt;</code></p><p>最常见的是在反射场景下的使用，这里以用一段发射的代码来说明下。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 通过反射的方式生成  multiLimit</span><br><span class="line">// 对象，这里比较明显的是，我们需要使用强制类型转换</span><br><span class="line">MultiLimit multiLimit = (MultiLimit)</span><br><span class="line">Class.forName(&quot;com.glmapper.bridge.boot.generic.MultiLimit&quot;).newInstance();</span><br></pre></td></tr></table></figure><p>对于上述代码，在运行期，如果反射的类型不是 MultiLimit 类，那么一定会报 java.lang.ClassCastException 错误。</p><p>对于这种情况，则可以使用下面的代码来代替，使得在在编译期就能直接 检查到类型的问题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test3&#123;</span><br><span class="line">    public static &lt;T&gt; T createInstance(Class&lt;T&gt; clazz) throws IlllegalAccessException, InstantiationException &#123;</span><br><span class="line">        return clazz.newInstance(); </span><br><span class="line">    &#125;</span><br><span class="line">    public static void main(String[] args) throws IlllegalAccessException, InstantiationException &#123;</span><br><span class="line">        A a = createInstance(A.class)</span><br><span class="line">        B b = createInstance(B.class)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class A &#123;&#125;</span><br><span class="line">class B &#123;&#125;</span><br></pre></td></tr></table></figure><p><code>Class&lt;T&gt;</code>在实例化的时候，T 要替换成具体类。<code>Class&lt;?&gt;</code>它是个通配泛型，? 可以代表任何类型，所以主要用于声明时的限制情况。比如，我们可以这样做申明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 可以</span><br><span class="line">public Class&lt;?&gt; clazz;</span><br><span class="line">// 不可以，因为 T 需要指定类型</span><br><span class="line">public Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure><p>所以当不知道定声明什么类型的 Class 的时候可以定义一 个Class&lt;?&gt;。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test3 &#123;</span><br><span class="line">    public Class&lt;?&gt; clazz;</span><br><span class="line">    public Class&lt;T&gt; clazzT;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那如果也想 <code>public Class&lt;T&gt; clazzT;</code>这样的话，就必须让当前的类也指定 T ，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class Test3&lt;T&gt; &#123;</span><br><span class="line">    public Class&lt;?&gt; clazz;</span><br><span class="line">    // 不会报错</span><br><span class="line">    public Class&lt;T&gt; clazzT;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip技巧</title>
      <link href="/archives/af6b4628.html"/>
      <url>/archives/af6b4628.html</url>
      
        <content type="html"><![CDATA[<h3 id="1、安装pip"><a href="#1、安装pip" class="headerlink" title="1、安装pip"></a>1、安装pip</h3><p>从Python 3.4开始，pip已经内置在Python中，所以无需再次安装。</p><p>如果你的Python版本没有pip，那可以使用下面两种方法安装。</p><p>(1) 命令行中输入<code>easy_install pip</code>，非常快捷</p><p>(2) 在下面网址中下载pip安装文件，然后解压到python scripts目录中，执行<code>python setup.py install</code>安装即可</p><p>下载网址：<a href="https://pypi.org/project/pip/#files">https://pypi.org/project/pip/#files</a></p><p>下载文件：</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/640.png"></p><h3 id="2、查看pip版本"><a href="#2、查看pip版本" class="headerlink" title="2、查看pip版本"></a>2、查看pip版本</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/649.png"></p><h3 id="3、升级pip"><a href="#3、升级pip" class="headerlink" title="3、升级pip"></a>3、升级pip</h3><p>如果pip的版本太低，可以升级当前版本<br><code>pip install --upgrade pip</code></p><h3 id="4、获取帮助"><a href="#4、获取帮助" class="headerlink" title="4、获取帮助"></a>4、获取帮助</h3><p>想了解如何使用pip，以及pip有哪些功能，执行下面语句可以获取详细教程:<br><code>pip help</code></p><h3 id="5、安装库"><a href="#5、安装库" class="headerlink" title="5、安装库"></a>5、安装库</h3><p>使用pip安装第三方库，执行下面语句<br><code>pip install package_name</code></p><p>指定package版本：<br><code>pip install package_name==1.1.2</code></p><p>比如说，我要安装3.4.1版本的matplotlib<br><code>pip install matplotlib==3.4.1</code></p><h3 id="6、批量安装库"><a href="#6、批量安装库" class="headerlink" title="6、批量安装库"></a>6、批量安装库</h3><p>如果一个项目需要安装很多库，那可以批量安装：<br><code>pip install -r e:\\requirements.txt</code></p><p><code>requirements.txt</code>文件内容格式如下：</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/641.png"></p><h3 id="7、使用wheel文件安装库"><a href="#7、使用wheel文件安装库" class="headerlink" title="7、使用wheel文件安装库"></a>7、使用wheel文件安装库</h3><p>这种方法适合离线安装，wheel文件是库的源文件，可以下载后放到本地安装。</p><p>步骤如下：</p><p>(1) 在下面网站里找相应库的.whl文件<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a></p><p>(2) 下载.whl文件，注意对应的版本</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/642.png"></p><p>(3) 在.whl所在文件夹内，按Shift键+鼠标右键，打开CMD窗口或者PowerShell</p><p>(4) 输入命令：<br><code>pip install matplotlib‑3.4.1‑cp39‑cp39‑win_amd64.whl</code><br>即可完成安装</p><h3 id="8、卸载库"><a href="#8、卸载库" class="headerlink" title="8、卸载库"></a>8、卸载库</h3><p>安装好的库可以再卸载：<br><code>pip uninstall package_name</code></p><h3 id="9、升级库"><a href="#9、升级库" class="headerlink" title="9、升级库"></a>9、升级库</h3><p>对当前库进行版本升级:<br><code>pip install --upgrade package_name</code></p><h3 id="10、查看库信息"><a href="#10、查看库信息" class="headerlink" title="10、查看库信息"></a>10、查看库信息</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip show -f package_name</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/643.png"></p><h3 id="11、查看已安装的库"><a href="#11、查看已安装的库" class="headerlink" title="11、查看已安装的库"></a>11、查看已安装的库</h3><p>列出所有已安装的第三方库和对应版本<br><code>pip list</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/644.png"></p><h3 id="12、将库列表保存到指定文件中"><a href="#12、将库列表保存到指定文件中" class="headerlink" title="12、将库列表保存到指定文件中"></a>12、将库列表保存到指定文件中</h3><p>把已经安装的库信息保存到到本地txt文件中：<br><code>pip freeze &gt; requirements.txt</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/645.png"></p><h3 id="13、查看需要升级的库"><a href="#13、查看需要升级的库" class="headerlink" title="13、查看需要升级的库"></a>13、查看需要升级的库</h3><p>目前已经安装的库中，看哪些需要版本升级<br><code>pip list -o</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/646.png"></p><h3 id="14、检查兼容问题"><a href="#14、检查兼容问题" class="headerlink" title="14、检查兼容问题"></a>14、检查兼容问题</h3><p>验证已安装的库是否有兼容依赖问题<br><code>pip check package-name</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/647.png"></p><h3 id="15、下载库到本地"><a href="#15、下载库到本地" class="headerlink" title="15、下载库到本地"></a>15、下载库到本地</h3><p>将库下载到本地指定文件，保存为whl格式<br><code>pip download package_name -d &quot;要保存的文件路径&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/648.png"></p><h3 id="附：更换pip源"><a href="#附：更换pip源" class="headerlink" title="附：更换pip源"></a>附：更换pip源</h3><p>很多人抱怨pip安装库有些时候太慢了，那是pip源的问题。</p><p>前面说过pip从PyPi中下载库文件，但由于PyPi服务器在国外，访问起来很慢。</p><p>但国内提供了很多镜像源，用来替代PyPi，像清华源、豆瓣源、阿里云源等。</p><p>这些镜像源备份了PyPi里的数据，由于服务器在国内，速度会快很多。</p><p>但镜像源数据有滞后性，比如说清华源的pypi 镜像每 5 分钟同步一次。</p><p>使用镜像源有两种方式，以清华源为例：</p><p>(1) 临时使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple some-package matplotlib</span><br></pre></td></tr></table></figure><p>除了matplotlib是要安装的库名外，其他都是固定格式</p><p>(2) 设为默认</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>设为默认后，以后安装库都是从清华源下载，而且无需再加镜像源网址</p><p>附主流镜像源地址</p><p>清华：<a href="https://pypi.tuna.tsinghua.edu.cn/simple">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>阿里云：<a href="http://mirrors.aliyun.com/pypi/simple/">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学：<a href="https://pypi.mirrors.ustc.edu.cn/simple/">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>华中理工大学：<a href="http://pypi.hustunique.com/">http://pypi.hustunique.com/</a><br>山东理工大学：<a href="http://pypi.sdutlinux.org/">http://pypi.sdutlinux.org/</a><br>豆瓣：<a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/archives/385c30d.html"/>
      <url>/archives/385c30d.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、IntelliJ-IDEA-快捷键大全-Win-版"><a href="#一、IntelliJ-IDEA-快捷键大全-Win-版" class="headerlink" title="一、IntelliJ IDEA 快捷键大全 Win 版"></a>一、IntelliJ IDEA 快捷键大全 Win 版</h2><h3 id="一、Ctrl-快捷键"><a href="#一、Ctrl-快捷键" class="headerlink" title="一、Ctrl 快捷键"></a>一、Ctrl 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Ctrl + F</td><td align="left">在当前文件进行文本查找</td><td align="left">√</td></tr><tr><td align="left">Ctrl + R</td><td align="left">在当前文件进行文本替换</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Z</td><td align="left">撤销</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Y</td><td align="left">删除光标所在行 或 删除选中的行</td><td align="left">√</td></tr><tr><td align="left">Ctrl + X</td><td align="left">剪切光标所在行 或 剪切选择内容</td><td align="left"></td></tr><tr><td align="left">Ctrl + C</td><td align="left">复制光标所在行 或 复制选择内容</td><td align="left"></td></tr><tr><td align="left">Ctrl + D</td><td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面</td><td align="left">√</td></tr><tr><td align="left">Ctrl + W</td><td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围</td><td align="left">√</td></tr><tr><td align="left">Ctrl + E</td><td align="left">显示最近打开的文件记录列表</td><td align="left">√</td></tr><tr><td align="left">Ctrl + N</td><td align="left">根据输入的 名/类名 查找类文件</td><td align="left">√</td></tr><tr><td align="left">Ctrl + G</td><td align="left">在当前文件跳转到指定行处</td><td align="left"></td></tr><tr><td align="left">Ctrl + J</td><td align="left">插入自定义动态代码模板</td><td align="left">√</td></tr><tr><td align="left">Ctrl + P</td><td align="left">方法参数提示显示</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Q</td><td align="left">光标所在的变量 / 类名 / 方法名等上面（也可以在提示补充的时候按），显示文档内容</td><td align="left"></td></tr><tr><td align="left">Ctrl + U</td><td align="left">前往当前光标所在的方法的父类的方法 / 接口定义</td><td align="left">√</td></tr><tr><td align="left">Ctrl + B</td><td align="left">进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击</td><td align="left">√</td></tr><tr><td align="left">Ctrl + K</td><td align="left">版本控制提交项目，需要此项目有加入到版本控制才可用</td><td align="left"></td></tr><tr><td align="left">Ctrl + T</td><td align="left">版本控制更新项目，需要此项目有加入到版本控制才可用</td><td align="left"></td></tr><tr><td align="left">Ctrl + H</td><td align="left">显示当前类的层次结构</td><td align="left"></td></tr><tr><td align="left">Ctrl + O</td><td align="left">选择可重写的方法</td><td align="left"></td></tr><tr><td align="left">Ctrl + I</td><td align="left">选择可继承的方法</td><td align="left"></td></tr><tr><td align="left">Ctrl + +</td><td align="left">展开代码</td><td align="left"></td></tr><tr><td align="left">Ctrl + -</td><td align="left">折叠代码</td><td align="left"></td></tr><tr><td align="left">Ctrl + /</td><td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td><td align="left">√</td></tr><tr><td align="left">Ctrl + U</td><td align="left">前往当前光标所在的方法的父类的方法 / 接口定义</td><td align="left">√</td></tr><tr><td align="left">Ctrl + B</td><td align="left">进入光标所在的方法/变量的接口或是定义处，等效于 Ctrl + 左键单击</td><td align="left">√</td></tr><tr><td align="left">Ctrl + K</td><td align="left">版本控制提交项目，需要此项目有加入到版本控制才可用</td><td align="left"></td></tr><tr><td align="left">Ctrl + T</td><td align="left">版本控制更新项目，需要此项目有加入到版本控制才可用</td><td align="left"></td></tr><tr><td align="left">Ctrl + H</td><td align="left">显示当前类的层次结构</td><td align="left"></td></tr><tr><td align="left">Ctrl + O</td><td align="left">选择可重写的方法</td><td align="left"></td></tr><tr><td align="left">Ctrl + I</td><td align="left">选择可继承的方法</td><td align="left"></td></tr><tr><td align="left">Ctrl + +</td><td align="left">展开代码</td><td align="left"></td></tr><tr><td align="left">Ctrl + -</td><td align="left">折叠代码</td><td align="left"></td></tr><tr><td align="left">Ctrl + /</td><td align="left">释光标所在行代码，会根据当前不同文件类型使用不同的注释符号</td><td align="left">√</td></tr><tr><td align="left">Ctrl + [</td><td align="left">移动光标到当前所在代码的花括号开始位置</td><td align="left"></td></tr><tr><td align="left">Ctrl + ]</td><td align="left">移动光标到当前所在代码的花括号结束位置</td><td align="left"></td></tr><tr><td align="left">Ctrl + F1</td><td align="left">在光标所在的错误代码处显示错误信息</td><td align="left">√</td></tr><tr><td align="left">Ctrl + F3</td><td align="left">调转到所选中的词的下一个引用位置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + F4</td><td align="left">关闭当前编辑文件</td><td align="left"></td></tr><tr><td align="left">Ctrl + F8</td><td align="left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td><td align="left"></td></tr><tr><td align="left">Ctrl + F9</td><td align="left">执行 Make Project 操作</td><td align="left"></td></tr><tr><td align="left">Ctrl + F11</td><td align="left">选中文件 / 文件夹，使用助记符设定 / 取消书签</td><td align="left">√</td></tr><tr><td align="left">Ctrl + F12</td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td><td align="left"></td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">编辑窗口切换，如果在切换的过程又加按上 delete，则是关闭对应选中的窗口</td><td align="left"></td></tr><tr><td align="left">Ctrl + End</td><td align="left">跳到文件尾</td><td align="left"></td></tr><tr><td align="left">Ctrl + Home</td><td align="left">跳到文件头</td><td align="left"></td></tr><tr><td align="left">Ctrl + Space</td><td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议 修改为 Ctrl +逗号</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Delete</td><td align="left">删除光标后面的单词或是中文句</td><td align="left">√</td></tr><tr><td align="left">Ctrl +BackSpace</td><td align="left">删除光标前面的单词或是中文句</td><td align="left">√</td></tr><tr><td align="left">Ctrl +1,2,3…9</td><td align="left">定位到对应数值的书签位置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + 左键单击</td><td align="left">在打开的文件标题上，弹出该文件路径</td><td align="left">√</td></tr><tr><td align="left">Ctrl + 光标定位按 Ctrl 不要松开</td><td align="left">会显示光标所在的类信息摘要</td><td align="left"></td></tr><tr><td align="left">Ctrl + 左方向键</td><td align="left">光标跳转到当前单词 / 中文句的左侧开头位置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + 右方向键</td><td align="left">光标跳转到当前单词 / 中文句的右侧开头位置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + 前方向键</td><td align="left">等效于鼠标滚轮向前效果</td><td align="left">√</td></tr><tr><td align="left">Ctrl + 后方向键</td><td align="left">等效于鼠标滚轮向后效果</td><td align="left">√</td></tr></tbody></table><h3 id="二、Alt-快捷键"><a href="#二、Alt-快捷键" class="headerlink" title="二、Alt 快捷键"></a>二、Alt 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Alt +</td><td align="left">显示版本控制常用操作菜单弹出层</td><td align="left">√</td></tr><tr><td align="left">Alt + Q</td><td align="left">弹出一个提示，显示当前类的声明 / 上下文信息</td><td align="left"></td></tr><tr><td align="left">Alt + F1</td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td><td align="left">√</td></tr><tr><td align="left">Alt + F2</td><td align="left">对于前面页面，显示各类浏览器打开目标选择弹出层</td><td align="left"></td></tr><tr><td align="left">Alt + F3</td><td align="left">选中文本，逐个往下查找相同文本，并高亮显示</td><td align="left"></td></tr><tr><td align="left">Alt + F7</td><td align="left">查找光标所在的方法 / 变量 / 类被调用的地方</td><td align="left"></td></tr><tr><td align="left">Alt + F8</td><td align="left">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td><td align="left"></td></tr><tr><td align="left">Alt + Home</td><td align="left">定位 / 显示到当前文件的 Navigation Bar</td><td align="left"></td></tr><tr><td align="left">Alt + Enter</td><td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示 的结果也不同</td><td align="left">√</td></tr><tr><td align="left">Alt + Insert</td><td align="left">代码自动生成，如生成对象的 set / get 方法，构造函数，toString() 等</td><td align="left">√</td></tr><tr><td align="left">Alt + 左方向键</td><td align="left">切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换</td><td align="left">√</td></tr><tr><td align="left">Alt + 右方向键</td><td align="left">按切换当前已打开的窗口中的子视图，比如 Debug 窗口中有 Output、Debugger 等子视图，用此快捷键就可以在子视图中切换</td><td align="left">√</td></tr><tr><td align="left">Alt + 前方向键</td><td align="left">当前光标跳转到当前文件的前一个方法名位置</td><td align="left">√</td></tr><tr><td align="left">Alt + 后方向键</td><td align="left">当前光标跳转到当前文件的后一个方法名位置</td><td align="left">√</td></tr><tr><td align="left">Alt +1,2,3…9</td><td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td><td align="left">√</td></tr></tbody></table><h3 id="三、Shift-快捷键"><a href="#三、Shift-快捷键" class="headerlink" title="三、Shift 快捷键"></a>三、Shift 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Shift + F1</td><td align="left">如果有外部文档可以连接外部文档</td><td align="left"></td></tr><tr><td align="left">Shift + F2</td><td align="left">跳转到上一个高亮错误 或 警告位置</td><td align="left"></td></tr><tr><td align="left">Shift + F3</td><td align="left">在查找模式下，查找匹配上一个</td><td align="left"></td></tr><tr><td align="left">Shift + F4</td><td align="left">对当前打开的文件，使用新 Windows 窗口打开，旧窗口保留</td><td align="left"></td></tr><tr><td align="left">Shift + F6</td><td align="left">对文件 / 文件夹 重命名</td><td align="left"></td></tr><tr><td align="left">Shift + F7</td><td align="left">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td><td align="left"></td></tr><tr><td align="left">Shift + F8</td><td align="left">在 Debug 模式下，跳出，表现出来的效果跟 F9 一样</td><td align="left"></td></tr><tr><td align="left">Shift + F9</td><td align="left">等效于点击工具栏的 Debug 按钮</td><td align="left"></td></tr><tr><td align="left">Shift + F10</td><td align="left">等效于点击工具栏的 Run 按钮</td><td align="left"></td></tr><tr><td align="left">Shift + F11</td><td align="left">弹出书签显示层</td><td align="left">√</td></tr><tr><td align="left">Shift + Tab</td><td align="left">取消缩进</td><td align="left">√</td></tr><tr><td align="left">Shift + ESC</td><td align="left">隐藏当前 或 最后一个激活的工具窗口</td><td align="left"></td></tr><tr><td align="left">Shift + End</td><td align="left">选中光标到当前行尾位置</td><td align="left"></td></tr><tr><td align="left">Shift + Home</td><td align="left">选中光标到当前行头位置</td><td align="left"></td></tr><tr><td align="left">Shift + Enter</td><td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td><td align="left">√</td></tr><tr><td align="left">Shift + 左键单击</td><td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td><td align="left">√</td></tr><tr><td align="left">Shift + 滚轮前后滚动</td><td align="left">当前文件的横向滚动轴滚动</td><td align="left">√</td></tr></tbody></table><h3 id="四、Ctrl-Alt-快捷键"><a href="#四、Ctrl-Alt-快捷键" class="headerlink" title="四、Ctrl + Alt 快捷键"></a>四、Ctrl + Alt 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Ctrl + Alt + L</td><td align="left">格式化代码，可以对当前文件和整个包目录使用</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + O</td><td align="left">优化导入的类，可以对当前文件和整个包目录使用</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + I</td><td align="left">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + T</td><td align="left">对选中的代码弹出环绕选项弹出层</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + J</td><td align="left">弹出模板选择窗口，将选定的代码加入动态模板中</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + H</td><td align="left">调用层次</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + B</td><td align="left">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + V</td><td align="left">快速引进变量</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + Y</td><td align="left">同步、刷新</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + S</td><td align="left">打开 IntelliJ IDEA 系统设置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + F7</td><td align="left">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + F11</td><td align="left">切换全屏模式</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + Enter</td><td align="left">光标所在行上空出一行，光标定位到新行</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + Home</td><td align="left">弹出跟当前文件有关联的文件弹出层</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + Space</td><td align="left">类名自动完成</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + 左方向键</td><td align="left">退回到上一个操作的地方</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + 右方向键</td><td align="left">前进到上一个操作的地方</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Alt + 前方向键</td><td align="left">在查找模式下，跳到上个查找的文件</td><td align="left"></td></tr><tr><td align="left">Ctrl + Alt + 后方向键</td><td align="left">在查找模式下，跳到下个查找的文件</td><td align="left"></td></tr></tbody></table><h3 id="五、Ctrl-Shift-快捷键"><a href="#五、Ctrl-Shift-快捷键" class="headerlink" title="五、Ctrl + Shift 快捷键"></a>五、Ctrl + Shift 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + F</td><td align="left">根据输入内容查找整个项目 或 指定目录内文件</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + R</td><td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + J</td><td align="left">自动将下一行合并到当前行末尾</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + Z</td><td align="left">取消撤销</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + W</td><td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + N</td><td align="left">通过文件名定位 / 打开文件 / 目录，打开目录需要在 输入的内容后面多加一个正斜杠</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + U</td><td align="left">对选中的代码进行大 / 小写轮流转换</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + T</td><td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + C</td><td align="left">复制当前文件磁盘路径到剪贴板</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + V</td><td align="left">弹出缓存的最近拷贝的内容管理器弹出层</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + E</td><td align="left">显示最近修改的文件列表的弹出层</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + H</td><td align="left">显示方法层次结构</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + B</td><td align="left">跳转到类型声明处</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + I</td><td align="left">快速查看光标所在的方法 或 类的定义</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + A</td><td align="left">查找动作 / 设置</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + /</td><td align="left">代码块注释</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + [</td><td align="left">选中从光标所在位置到它的顶部中括号位置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + ]</td><td align="left">选中从光标所在位置到它的底部中括号位置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + +</td><td align="left">展开所有代码</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + -</td><td align="left">折叠所有代码</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + F7</td><td align="left">高亮显示所有该选中文本，按 Esc 高亮消失</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + F8</td><td align="left">在 Debug 模式下，指定断点进入条件</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + F9</td><td align="left">编译选中的文件 / 包 / Module</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + F12</td><td align="left">编辑器最大化</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + Space</td><td align="left">智能代码提示</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + Enter</td><td align="left">自动结束代码，行末自动添加分号</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift +Backspace</td><td align="left">退回到上次修改的地方</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift +1,2,3…9</td><td align="left">快速添加指定数值的书签</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 左键单击</td><td align="left">把光标放在某个类变量上，按此快捷键可以直接定位到该类中</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 左方向键</td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的左侧开头位置， 同时选中该单词 / 中文句</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 右方向键</td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置， 同时选中该单词 / 中文句</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 前方向键</td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 后方向键</td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + 右方向键</td><td align="left">在代码文件上，光标跳转到当前单词 / 中文句的右侧开头位置， 同时选中该单词 / 中文句</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 前方向键</td><td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + 后方向键</td><td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法 排序</td><td align="left">√</td></tr></tbody></table><h3 id="六、Alt-Shift-快捷键"><a href="#六、Alt-Shift-快捷键" class="headerlink" title="六、Alt + Shift 快捷键"></a>六、Alt + Shift 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Alt + Shift + N</td><td align="left">选择 / 添加 task</td><td align="left">√</td></tr><tr><td align="left">Alt + Shift + F</td><td align="left">显示添加到收藏夹弹出层 / 添加到收藏夹</td><td align="left"></td></tr><tr><td align="left">Alt + Shift + C</td><td align="left">查看最近操作项目的变化情况列表</td><td align="left"></td></tr><tr><td align="left">Alt + Shift + I</td><td align="left">查看项目当前文件</td><td align="left"></td></tr><tr><td align="left">Alt + Shift + F7</td><td align="left">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td><td align="left"></td></tr><tr><td align="left">Alt + Shift + F9</td><td align="left">弹出 Debug 的可选择菜单</td><td align="left"></td></tr><tr><td align="left">Alt + Shift + F10</td><td align="left">弹出 Run 的可选择菜单</td><td align="left"></td></tr><tr><td align="left">Alt + Shift + 左键双击</td><td align="left">选择被双击的单词 / 中文句，按住不放，可以同时选择其他单词 / 中文句</td><td align="left">√</td></tr><tr><td align="left">Alt + Shift + 前方向键</td><td align="left">移动光标所在行向上移动</td><td align="left">√</td></tr><tr><td align="left">Alt + Shift + 后方向键</td><td align="left">移动光标所在行向下移动</td><td align="left">√</td></tr></tbody></table><h3 id="七、Ctrl-Shift-Alt-快捷键"><a href="#七、Ctrl-Shift-Alt-快捷键" class="headerlink" title="七、Ctrl + Shift + Alt 快捷键"></a>七、Ctrl + Shift + Alt 快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">Ctrl + Shift + Alt + V</td><td align="left">无格式黏贴</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + Alt + N</td><td align="left">前往指定的变量 / 方法</td><td align="left"></td></tr><tr><td align="left">Ctrl + Shift + Alt + S</td><td align="left">打开当前项目设置</td><td align="left">√</td></tr><tr><td align="left">Ctrl + Shift + Alt + C</td><td align="left">复制参考信息</td><td align="left"></td></tr></tbody></table><h3 id="八、其他快捷键"><a href="#八、其他快捷键" class="headerlink" title="八、其他快捷键"></a>八、其他快捷键</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th><th align="left">常用</th></tr></thead><tbody><tr><td align="left">F2</td><td align="left">跳转到下一个高亮错误 或 警告位置</td><td align="left">√</td></tr><tr><td align="left">F3</td><td align="left">在查找模式下，定位到下一个匹配处</td><td align="left"></td></tr><tr><td align="left">F4</td><td align="left">编辑源</td><td align="left">√</td></tr><tr><td align="left">F7</td><td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td><td align="left"></td></tr><tr><td align="left">F8</td><td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td><td align="left"></td></tr><tr><td align="left">F9</td><td align="left">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td><td align="left"></td></tr><tr><td align="left">F11</td><td align="left">添加书签</td><td align="left">√</td></tr><tr><td align="left">F12</td><td align="left">回到前一个工具窗口</td><td align="left">√</td></tr><tr><td align="left">Tab</td><td align="left">缩进</td><td align="left">√</td></tr><tr><td align="left">ESC</td><td align="left">从工具窗口进入代码文件窗口</td><td align="left">√</td></tr><tr><td align="left">连按两次 Shift</td><td align="left">弹出 Search Everywhere 弹出层</td><td align="left">√</td></tr></tbody></table><h2 id="二、IntelliJ-IDEA-快捷键大全-Mac"><a href="#二、IntelliJ-IDEA-快捷键大全-Mac" class="headerlink" title="二、IntelliJ IDEA 快捷键大全 Mac"></a>二、IntelliJ IDEA 快捷键大全 Mac</h2><h3 id="Mac-键盘符号和修饰键说明"><a href="#Mac-键盘符号和修饰键说明" class="headerlink" title="Mac 键盘符号和修饰键说明"></a>Mac 键盘符号和修饰键说明</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘</td><td align="left">Command</td></tr><tr><td align="left">⇧</td><td align="left">Shift</td></tr><tr><td align="left">⌥</td><td align="left">Option</td></tr><tr><td align="left">⌃</td><td align="left">Control</td></tr><tr><td align="left">↩︎</td><td align="left">Return/Enter</td></tr><tr><td align="left">⌫</td><td align="left">Delete</td></tr><tr><td align="left">⌦</td><td align="left">向前删除键（Fn+Delete）</td></tr><tr><td align="left">↑</td><td align="left">上箭头</td></tr><tr><td align="left">↓</td><td align="left">下箭头</td></tr><tr><td align="left">←</td><td align="left">左箭头</td></tr><tr><td align="left">→</td><td align="left">右箭头</td></tr><tr><td align="left">⇞</td><td align="left">Page Up（Fn+↑）</td></tr><tr><td align="left">⇟</td><td align="left">Page Down（Fn+↓）</td></tr><tr><td align="left">Home</td><td align="left">Fn + ←</td></tr><tr><td align="left">End</td><td align="left">Fn + →</td></tr><tr><td align="left">⇥</td><td align="left">右制表符（Tab 键）</td></tr><tr><td align="left">⇤</td><td align="left">左制表符（Shift+Tab）</td></tr><tr><td align="left">⎋</td><td align="left">Escape (Esc)</td></tr></tbody></table><h3 id="一、Editing（编辑）"><a href="#一、Editing（编辑）" class="headerlink" title="一、Editing（编辑）"></a>一、Editing（编辑）</h3><table><thead><tr><th align="left">快捷键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌃Space</td><td align="left">基本的代码补全（补全任何类、方法、变量）</td></tr><tr><td align="left">⌃⇧Space</td><td align="left">智能代码补全（过滤器方法列表和变量的预期类型）</td></tr><tr><td align="left">⌘⇧↩</td><td align="left">自动结束代码，行末自动添加分号</td></tr><tr><td align="left">⌘P</td><td align="left">显示方法的参数信息</td></tr><tr><td align="left">⌃J, Mid. button click</td><td align="left">快速查看文档</td></tr><tr><td align="left">⇧F1</td><td align="left">查看外部文档（在某些代码上会触发打开浏览器显示相关文档）</td></tr><tr><td align="left">⌘+鼠标放在代码上</td><td align="left">显示代码简要信息</td></tr><tr><td align="left">⌘F1</td><td align="left">在错误或警告处显示具体描述信息</td></tr><tr><td align="left">⌘N, ⌃↩, ⌃N</td><td align="left">生成代码（getter、setter、构造函数、hashCode/equals,toString）</td></tr><tr><td align="left">⌃O</td><td align="left">覆盖方法（重写父类方法）</td></tr><tr><td align="left">⌃I</td><td align="left">实现方法（实现接口中的方法）</td></tr><tr><td align="left">⌘⌥T</td><td align="left">包围代码（使用 if…else, try…catch, for, synchronized 等包围 选中的代码）</td></tr><tr><td align="left">⌘/</td><td align="left">注释/取消注释与行注释</td></tr><tr><td align="left">⌘⌥/</td><td align="left">注释/取消注释与块注释</td></tr><tr><td align="left">⌥↑</td><td align="left">连续选中代码块</td></tr><tr><td align="left">⌥↓</td><td align="left">减少当前选中的代码块</td></tr><tr><td align="left">⌃⇧Q</td><td align="left">显示上下文信息</td></tr><tr><td align="left">⌥↩</td><td align="left">显示意向动作和快速修复代码</td></tr><tr><td align="left">⌘⌥L</td><td align="left">格式化代码</td></tr><tr><td align="left">⌃⌥O</td><td align="left">优化 import</td></tr><tr><td align="left">⌃⌥I</td><td align="left">自动缩进线</td></tr><tr><td align="left">⇥ / ⇧⇥</td><td align="left">缩进代码 / 反缩进代码</td></tr><tr><td align="left">⌘X</td><td align="left">剪切当前行或选定的块到剪贴板</td></tr><tr><td align="left">⌘C</td><td align="left">复制当前行或选定的块到剪贴板</td></tr><tr><td align="left">⌘V</td><td align="left">从剪贴板粘贴</td></tr><tr><td align="left">⌘⇧V</td><td align="left">从最近的缓冲区粘贴</td></tr><tr><td align="left">⌘D</td><td align="left">复制当前行或选定的块</td></tr><tr><td align="left">⌘⌫</td><td align="left">删除当前行或选定的块的行</td></tr><tr><td align="left">⌃⇧J</td><td align="left">智能的将代码拼接成一行</td></tr><tr><td align="left">⌘↩</td><td align="left">智能的拆分拼接的行</td></tr><tr><td align="left">⇧↩</td><td align="left">开始新的一行</td></tr><tr><td align="left">⌘⇧U</td><td align="left">大小写切换</td></tr><tr><td align="left">⌘⇧] / ⌘⇧[</td><td align="left">选择直到代码块结束/开始</td></tr><tr><td align="left">⌥⌦</td><td align="left">删除到单词的末尾（⌦ 键为 Fn+Delete）</td></tr><tr><td align="left">⌥⌫</td><td align="left">删除到单词的开头</td></tr><tr><td align="left">⌘+ / ⌘-</td><td align="left">展开 / 折叠代码块</td></tr><tr><td align="left">⌘⇧+</td><td align="left">展开所以代码块</td></tr><tr><td align="left">⌘⇧-</td><td align="left">折叠所有代码块</td></tr><tr><td align="left">⌘W</td><td align="left">关闭活动的编辑器选项卡</td></tr></tbody></table><h3 id="二、Search-Replace（查询-替换）"><a href="#二、Search-Replace（查询-替换）" class="headerlink" title="二、Search/Replace（查询/替换）"></a>二、Search/Replace（查询/替换）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Double ⇧</td><td align="left">查询任何东西</td></tr><tr><td align="left">⌘F</td><td align="left">文件内查找</td></tr><tr><td align="left">⌘G</td><td align="left">查找模式下，向下查找</td></tr><tr><td align="left">⌘⇧G</td><td align="left">查找模式下，向上查找</td></tr><tr><td align="left">⌘R</td><td align="left">文件内替换</td></tr><tr><td align="left">⌘⇧F</td><td align="left">全局查找（根据路径）</td></tr><tr><td align="left">⌘⇧R</td><td align="left">全局替换（根据路径）</td></tr><tr><td align="left">⌘⇧S</td><td align="left">查询结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</td></tr><tr><td align="left">⌘⇧M</td><td align="left">替换结构（Ultimate Edition 版专用，需要在 Keymap 中设置）</td></tr></tbody></table><h3 id="三、Usage-Search（使用查询）"><a href="#三、Usage-Search（使用查询）" class="headerlink" title="三、Usage Search（使用查询）"></a>三、Usage Search（使用查询）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌥F7 / ⌘F7</td><td align="left">在文件中查找用法 / 在类中查找用法</td></tr><tr><td align="left">⌘⇧F7</td><td align="left">在文件中突出显示的用法</td></tr><tr><td align="left">⌘⌥F7</td><td align="left">显示用法</td></tr></tbody></table><h3 id="四、Compile-and-Run（编译和运行）"><a href="#四、Compile-and-Run（编译和运行）" class="headerlink" title="四、Compile and Run（编译和运行）"></a>四、Compile and Run（编译和运行）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘F9</td><td align="left">编译 Project</td></tr><tr><td align="left">⌘⇧F9</td><td align="left">编译选择的文件、包或模块</td></tr><tr><td align="left">⌃⌥R</td><td align="left">弹出 Run 的可选择菜单</td></tr><tr><td align="left">⌃⌥D</td><td align="left">弹出 Debug 的可选择菜单</td></tr><tr><td align="left">⌃R</td><td align="left">运行</td></tr><tr><td align="left">⌃D</td><td align="left">调试</td></tr><tr><td align="left">⌃⇧R, ⌃⇧D</td><td align="left">从编辑器运行上下文环境配置</td></tr></tbody></table><h3 id="五、Debugging（调试）"><a href="#五、Debugging（调试）" class="headerlink" title="五、Debugging（调试）"></a>五、Debugging（调试）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">F8</td><td align="left">进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td></tr><tr><td align="left">F7</td><td align="left">进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td></tr><tr><td align="left">⇧F7</td><td align="left">智能步入，断点所在行上有多个方法调用，会弹出进入哪个方法</td></tr><tr><td align="left">⇧F8</td><td align="left">跳出</td></tr><tr><td align="left">⌥F9</td><td align="left">运行到光标处，如果光标前有其他断点会进入到该断点</td></tr><tr><td align="left">⌥F8</td><td align="left">计算表达式（可以更改变量值使其生效）</td></tr><tr><td align="left">⌘⌥R</td><td align="left">恢复程序运行，如果该断点下面代码还有断点则停在下一个断点上</td></tr><tr><td align="left">⌘F8</td><td align="left">切换断点（若光标当前行有断点则取消断点，没有则加上断点）</td></tr><tr><td align="left">⌘⇧F8</td><td align="left">查看断点信息</td></tr></tbody></table><h3 id="六、Navigation（导航）"><a href="#六、Navigation（导航）" class="headerlink" title="六、Navigation（导航）"></a>六、Navigation（导航）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘O</td><td align="left">查找类文件</td></tr><tr><td align="left">⌘⇧O</td><td align="left">查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</td></tr><tr><td align="left">⌘⌥O</td><td align="left">前往指定的变量 / 方法</td></tr><tr><td align="left">⌃← / ⌃→</td><td align="left">左右切换打开的编辑 tab 页</td></tr><tr><td align="left">F12</td><td align="left">返回到前一个工具窗口</td></tr><tr><td align="left">⎋</td><td align="left">从工具窗口进入代码文件窗口</td></tr><tr><td align="left">⇧⎋</td><td align="left">隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</td></tr><tr><td align="left">⌘⇧F4</td><td align="left">关闭活动 run/messages/find/… tab</td></tr><tr><td align="left">⌘L</td><td align="left">在当前文件跳转到某一行的指定处</td></tr><tr><td align="left">⌘E</td><td align="left">显示最近打开的文件记录列表</td></tr><tr><td align="left">⌘⌥← / ⌘⌥→</td><td align="left">退回 / 前进到上一个操作的地方</td></tr><tr><td align="left">⌘⇧⌫</td><td align="left">跳转到最后一个编辑的地方</td></tr><tr><td align="left">⌥F1</td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在 代码编辑窗口可以选择显示该文件的 Finder)</td></tr><tr><td align="left">⌘B / ⌘</td><td align="left">鼠标点击 进入光标所在的方法/变量的接口或是定义处</td></tr><tr><td align="left">⌘⌥B</td><td align="left">跳转到实现处，在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td></tr><tr><td align="left">⌥ Space, ⌘Y</td><td align="left">快速打开光标所在方法、类的定义</td></tr><tr><td align="left">⌃⇧B</td><td align="left">跳转到类型声明处</td></tr><tr><td align="left">⌘U</td><td align="left">前往当前光标所在方法的父类的方法 / 接口定义</td></tr><tr><td align="left">⌃↓ / ⌃↑</td><td align="left">当前光标跳转到当前文件的前一个/后一个方法名位置</td></tr><tr><td align="left">⌘] / ⌘[</td><td align="left">移动光标到当前所在代码的花括号开始/结束位置</td></tr><tr><td align="left">⌘F12</td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</td></tr><tr><td align="left">⌃H</td><td align="left">显示当前类的层次结构</td></tr><tr><td align="left">⌘⇧H</td><td align="left">显示方法层次结构</td></tr><tr><td align="left">⌃⌥H</td><td align="left">显示调用层次结构</td></tr><tr><td align="left">F2 / ⇧F2</td><td align="left">跳转到下一个/上一个突出错误或警告的位置</td></tr><tr><td align="left">F4 / ⌘↓</td><td align="left">编辑/查看代码源</td></tr><tr><td align="left">⌥ Home</td><td align="left">显示到当前文件的导航条</td></tr><tr><td align="left">F3</td><td align="left">选中文件/文件夹/代码行，添加/取消书签</td></tr><tr><td align="left">⌥F3</td><td align="left">选中文件/文件夹/代码行，使用助记符添加/取消书签</td></tr><tr><td align="left">⌃0…⌃9</td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left">⌘F3</td><td align="left">显示所有书签</td></tr></tbody></table><h3 id="七、Refactoring（重构）"><a href="#七、Refactoring（重构）" class="headerlink" title="七、Refactoring（重构）"></a>七、Refactoring（重构）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">F5</td><td align="left">复制文件到指定目录</td></tr><tr><td align="left">F6</td><td align="left">移动文件到指定目录</td></tr><tr><td align="left">⌘⌫</td><td align="left">在文件上为安全删除文件，弹出确认框</td></tr><tr><td align="left">⇧F6</td><td align="left">重命名文件</td></tr><tr><td align="left">⌘F6</td><td align="left">更改签名</td></tr><tr><td align="left">⌘⌥N</td><td align="left">一致性</td></tr><tr><td align="left">⌘⌥M</td><td align="left">将选中的代码提取为方法</td></tr><tr><td align="left">⌘⌥V</td><td align="left">提取变量</td></tr><tr><td align="left">⌘⌥F</td><td align="left">提取字段</td></tr><tr><td align="left">⌘⌥C</td><td align="left">提取常量</td></tr><tr><td align="left">⌘⌥P</td><td align="left">提取参数</td></tr></tbody></table><h3 id="八、VCS-Local-History（版本控制-本地历史记录）"><a href="#八、VCS-Local-History（版本控制-本地历史记录）" class="headerlink" title="八、VCS/Local History（版本控制/本地历史记录）"></a>八、VCS/Local History（版本控制/本地历史记录）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘K</td><td align="left">提交代码到版本控制器</td></tr><tr><td align="left">⌘T</td><td align="left">从版本控制器更新代码</td></tr><tr><td align="left">⌥⇧C</td><td align="left">查看最近的变更记录</td></tr><tr><td align="left">⌃C</td><td align="left">快速弹出版本控制器操作面板</td></tr></tbody></table><h3 id="九、Live-Templates（动态代码模板）"><a href="#九、Live-Templates（动态代码模板）" class="headerlink" title="九、Live Templates（动态代码模板）"></a>九、Live Templates（动态代码模板）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘⌥J</td><td align="left">弹出模板选择窗口，将选定的代码使用动态模板包住</td></tr><tr><td align="left">⌘J</td><td align="left">插入自定义动态代码模板</td></tr></tbody></table><h3 id="十、General（通用）"><a href="#十、General（通用）" class="headerlink" title="十、General（通用）"></a>十、General（通用）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘1…⌘9</td><td align="left">打开相应编号的工具窗口</td></tr><tr><td align="left">⌘S</td><td align="left">保存所有</td></tr><tr><td align="left">⌘⌥Y</td><td align="left">同步、刷新</td></tr><tr><td align="left">⌃⌘F</td><td align="left">切换全屏模式</td></tr><tr><td align="left">⌘⇧F12</td><td align="left">切换最大化编辑器</td></tr><tr><td align="left">⌥⇧F</td><td align="left">添加到收藏夹</td></tr><tr><td align="left">⌥⇧I</td><td align="left">检查当前文件与当前的配置文件</td></tr><tr><td align="left">§⌃, ⌃`</td><td align="left">快速切换当前的 scheme（切换主题、代码样式等）</td></tr><tr><td align="left">⌘,</td><td align="left">打开 IDEA 系统设置</td></tr><tr><td align="left">⌘;</td><td align="left">打开项目结构对话框</td></tr><tr><td align="left">⇧⌘A</td><td align="left">查找动作（可设置相关选项）</td></tr><tr><td align="left">⌃⇥</td><td align="left">编辑窗口标签和工具窗口之间切换（如果在切换的过程加按上 delete，则是关闭对应选中的窗口）</td></tr></tbody></table><h3 id="十一、Other（一些官方文档上没有体现的快捷键）"><a href="#十一、Other（一些官方文档上没有体现的快捷键）" class="headerlink" title="十一、Other（一些官方文档上没有体现的快捷键）"></a>十一、Other（一些官方文档上没有体现的快捷键）</h3><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘⇧8</td><td align="left">竖编辑模式</td></tr></tbody></table><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌘O</td><td align="left">查找类文件 Ctrl + N</td></tr><tr><td align="left">⌘⌥O</td><td align="left">前往指定的变量 / 方法 Ctrl + Shift + Alt + N</td></tr><tr><td align="left">⌃← / ⌃→</td><td align="left">左右切换打开的编辑 tab 页 Alt← / Alt→</td></tr><tr><td align="left">⎋</td><td align="left">从工具窗口进入代码文件窗口 ESC</td></tr><tr><td align="left">⌘L</td><td align="left">在当前文件跳转到某一行的指定处 Ctrl + G</td></tr><tr><td align="left">⌘E</td><td align="left">显示最近打开的文件记录列表 Ctrl + E</td></tr><tr><td align="left">⌘⌥← / ⌘⌥→</td><td align="left">退回 / 前进到上一个操作的地方 Ctrl + Alt + ← Ctrl + Alt + →</td></tr><tr><td align="left">⌘⇧⌫</td><td align="left">跳转到最后一个编辑的地方</td></tr><tr><td align="left">⌃H</td><td align="left">显示当前类的层次结构 Ctrl + H</td></tr><tr><td align="left">⌘⇧H</td><td align="left">显示方法层次结构</td></tr><tr><td align="left">⌃⌥H</td><td align="left">显示调用层次结构</td></tr><tr><td align="left">F4 / ⌘↓</td><td align="left">编辑/查看代码源</td></tr><tr><td align="left">⌘⌥U</td><td align="left">显示类 UML 图</td></tr><tr><td align="left">⌃J</td><td align="left">查看注释</td></tr></tbody></table><h4 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h4><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌥⌦</td><td align="left">删除到单词的末尾（⌦ 键为 Fn+Delete）</td></tr><tr><td align="left">⌥⌫</td><td align="left">删除到单词的开头</td></tr><tr><td align="left">⌘+ / ⌘-</td><td align="left">展开 / 折叠代码块</td></tr><tr><td align="left">⌘F1</td><td align="left">在错误或警告处显示具体描述信息</td></tr><tr><td align="left">⌘⌥L</td><td align="left">格式化代码</td></tr><tr><td align="left">⌃⌥O</td><td align="left">优化 import</td></tr><tr><td align="left">⇧↩</td><td align="left">开始新的一行</td></tr><tr><td align="left">⌘⇧↩</td><td align="left">自动结束代码，行末自动添加分号</td></tr><tr><td align="left">⌃I</td><td align="left">实现方法（实现接口中的方法）</td></tr><tr><td align="left">⇧F6</td><td align="left">重命名文件或者变量</td></tr><tr><td align="left">⌘N, ⌃↩, ⌃N</td><td align="left">生成代码（getter、setter、构造函数、hashCode/equals,toString）</td></tr><tr><td align="left">⌘P</td><td align="left">显示方法的参数信息</td></tr></tbody></table><h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">Double⇧</td><td align="left">查找任何东西</td></tr><tr><td align="left">⌘⇧F</td><td align="left">全局查找（根据路径）</td></tr><tr><td align="left">⌘F</td><td align="left">文件内查找</td></tr><tr><td align="left">⌘G</td><td align="left">查找模式下，向下查找</td></tr><tr><td align="left">⌘⇧G</td><td align="left">查找模式下，向上查找</td></tr><tr><td align="left">⌘⌥B</td><td align="left">跳转到接口的实现</td></tr><tr><td align="left">⌘U</td><td align="left">查看接口定义</td></tr><tr><td align="left">⌘⌥← / ⌘⌥→</td><td align="left">退回 / 前进到上一个操作的地方</td></tr><tr><td align="left">⌘B / ⌘</td><td align="left">鼠标点击 进入光标所在的方法/变量的接口或是定义处</td></tr><tr><td align="left">⌃⇧B</td><td align="left">跳转到类型声明处</td></tr><tr><td align="left">⌥ Space, ⌘Y</td><td align="left">快速打开光标所在方法、类的定义</td></tr><tr><td align="left">⌘O</td><td align="left">查找类文件</td></tr><tr><td align="left">⌘⇧O</td><td align="left">查找所有类型文件、打开文件、打开目录，打开目录需要在输入的内容前面或后面加一个反斜杠/</td></tr><tr><td align="left">F12</td><td align="left">返回到前一个工具窗口</td></tr><tr><td align="left">⎋</td><td align="left">从工具窗口进入代码文件窗口</td></tr><tr><td align="left">⇧⎋</td><td align="left">隐藏当前或最后一个活动的窗口，且光标进入代码文件窗口</td></tr><tr><td align="left">F3</td><td align="left">选中文件/文件夹/代码行，添加/取消书签</td></tr><tr><td align="left">⌥F3</td><td align="left">选中文件/文件夹/代码行，使用助记符添加/取消书签</td></tr><tr><td align="left">⌃0…⌃9</td><td align="left">定位到对应数值的书签位置</td></tr><tr><td align="left">⌘F3</td><td align="left">显示所有书签</td></tr><tr><td align="left">⌥F1</td><td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择(如在代码编辑窗口可以选择显示该文件的 Finder)</td></tr><tr><td align="left">⌘F12</td><td align="left">弹出当前文件结构层，可以在弹出的层上直接输入进行筛选（可用于搜索类中的方法）</td></tr></tbody></table><h4 id="通用"><a href="#通用" class="headerlink" title="通用"></a>通用</h4><table><thead><tr><th align="left">按键</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">⌃⌘F</td><td align="left">切换全屏模式</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea操作</title>
      <link href="/archives/358cc2b5.html"/>
      <url>/archives/358cc2b5.html</url>
      
        <content type="html"><![CDATA[<h3 id="提高效率的常用配置"><a href="#提高效率的常用配置" class="headerlink" title="提高效率的常用配置"></a><strong>提高效率的常用配置</strong></h3><ol><li>自动导包和优化多余的包</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/Snipaste_2022-07-30_15-53-00.png"></p><p>在开发的时候，我们发现有些包一直存在我们的项目中，但就是使用不了，而你的同事却用的很好，这时候你就会怀疑你的编译器是不是出问题了，就会出现清除缓存，重启ide等一系列骚操作。其实没有必要只需按上图配置Auto Import，你会发现很多问题都好了。</p><ol start="2"><li>忽略大小写，进行提示</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/Snipaste_2022-07-30_15-54-15.png"></p><ol start="3"><li>CTRL + 滑动滚轮 调整窗口显示大小</li></ol><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/Snipaste_2022-07-30_15-56-08.png"></p><h3 id="提高效率的常用插件-Plugins"><a href="#提高效率的常用插件-Plugins" class="headerlink" title="提高效率的常用插件(Plugins)"></a><strong>提高效率的常用插件(Plugins)</strong></h3><ol><li><p>Alibaba Java Coding Guidelines</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/Snipaste_2022-07-30_15-57-24.png"></p></li></ol><p>alibaba java coding guidelines这个插件是阿里巴巴规约的工具。通过鼠标悬浮代码或右键后选择“编码规约扫描”，可以看不符合规约的代码，并提出建设性意见，让我们的代码更加安全，简洁，美观。</p><ol start="2"><li><p>MybatisX（MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生）</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/Snipaste_2022-07-30_16-00-01.png"></p></li></ol><p>可以快速定位分析sql,它的作用并不仅仅是定位，自动生成</p><ol start="3"><li>Lombok</li></ol><p>  lombok是java自动生成代码的插件。它能提高开发效率，减少自己编写繁琐的代码，让代码看起来更整洁简略，比如getter、setter、equals以及construct等方法。</p><p><img src="https://cdn.jsdelivr.net/gh/zhou200018/picdemo/img/Snipaste_2022-07-30_16-00-56.png"></p>]]></content>
      
      
      <categories>
          
          <category> 优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>考研安排</title>
      <link href="/archives/afa3d4ad.html"/>
      <url>/archives/afa3d4ad.html</url>
      
        <content type="html"><![CDATA[<h1 id="考研安排"><a href="#考研安排" class="headerlink" title="考研安排"></a>考研安排</h1><h2 id="英语"><a href="#英语" class="headerlink" title="英语"></a>英语</h2><p><strong>暑期</strong></p><p>真题词汇2、每天一篇真题阅读</p><blockquote><p><strong>9月</strong> 单词、阅读（要2刷，一次四篇，一周3次）<br><strong>10月</strong> 翻译、完形、新题型（性价比高，可多花时间。做10年后真题，做完看讲解视频。)<br><strong>11月</strong> 大小作文 背模版和好的句子</p></blockquote><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p>按顺序:<br>高数基础 建议时间（30天）<br>线代基础（10天）<br>高数强化、线代强化（50天）强化课要听<br>概率论基础+强化<br><strong>到国庆</strong><br>温习、复习错题<br>数二: 05～22刷真题 2遍<br>数一、数三：<strong>10月底</strong>概率要搞完05～22真题3星期，一天两套<br><strong>下一阶段</strong>：跟着咋子哥写李林模拟卷，查缺补漏</p><h2 id="政治9月开始～11月"><a href="#政治9月开始～11月" class="headerlink" title="政治9月开始～11月"></a>政治9月开始～11月</h2><p>顺序：马原、史纲、毛中特、思修上强化课，写1000题或小程序刷题<br><strong>12月</strong> 肖8 刷三遍背肖四，准备大题（不要过于死磕）</p>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂记</title>
      <link href="/archives/430d67de.html"/>
      <url>/archives/430d67de.html</url>
      
        <content type="html"><![CDATA[<p>不知道该记录什么</p>]]></content>
      
      
      <categories>
          
          <category> 杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github官方初始化指令</title>
      <link href="/archives/fb9ff7d3.html"/>
      <url>/archives/fb9ff7d3.html</url>
      
        <content type="html"><![CDATA[<h3 id="在命令行上创建新的存储库"><a href="#在命令行上创建新的存储库" class="headerlink" title="在命令行上创建新的存储库"></a>在命令行上创建新的存储库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;# blog&quot; &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/zhou200018/blog.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><h3 id="从命令行推送现有存储库"><a href="#从命令行推送现有存储库" class="headerlink" title=".从命令行推送现有存储库"></a>.从命令行推送现有存储库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin https://github.com/zhou200018/blog.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QuickStart </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git团队基本操作流程</title>
      <link href="/archives/a4469409.html"/>
      <url>/archives/a4469409.html</url>
      
        <content type="html"><![CDATA[<h2 id="git操作"><a href="#git操作" class="headerlink" title="git操作"></a>git操作</h2><p>组长在码云创建一个工程,然后组长clone下来</p><p>组长搭建好项目骨架之后,进行下面这些动作</p><ol><li><p>组长在码云上创建一个空的工程</p></li><li><p>组长需要在本地搭建好springboot的环境</p></li><li><p>组长需要将本地仓库和远程仓库进行一个关联动作进入到项目的根目录下执行</p></li><li><p>将本地仓库和远程仓库进行绑定/关联git remote add origin 远程仓库地址</p></li><li><p>执行git pull origin master</p></li><li><p>编辑从远程仓库拉下来的.gitignore文件.作用:可以配置忽略的文件[不受git管理]</p></li><li><p> 添加并且提交</p></li><li><p>推到远程仓库的master分支</p></li><li><p>组长开始邀请开发人员,再在远程创建分支,然后把链接分享给组员.组员执行git clone操作,将项目导入到idea中.</p><p>组员在本地新建本地分支,切换到本地分支进行项目的开发,开发之后将本地分支推送到远程对应的远程自己的分支</p><p>然后组员拉pr,然后组员看pr,然后进行项目的合并[远程的其余分支的内容合并到远程的master分支]</p><blockquote><p>在桌面新建了一个git-xx目录</p><p>从终端进入到这个git-xx目录</p><p>将git-xx目录初始化为一个git的本地仓库执行完之后的效果是在git-xx的目录下会自动创建一个隐藏的.git目录,之后的git的操作只能在git本地仓库所在的目录下进行操作。</p><p>查看当前所在分支</p><p>新建分支git branch 分支名</p><p>切换分支分支的继承性 - 在哪个分支下新建的分支,那么这个新的分支默认会保留当前这个分支下所有的数据.</p><p>在git-xx目录下新建一个文件h.txt</p><p>查看本地仓库的状态的命令 - git status信息提示是红色的 - 说明当前的改变仅仅是在工作区的改变</p><p>工作区的改变添加到暂存区中 git add命令</p><p>git add 具体的文件/目录的名称</p><p>git add .</p><p>继续查看当前本地仓库的状态，信息提示变成绿色</p><p>把暂存区的修改同步到版本库中去</p><p>继续查看当前本地仓库的状态，默认是在master分支上的改变.</p><p>组员需要将本地分支的内容提到到自己对应的远程分支上面去, 组长需要在远程查看各个分支下是否存在已经上传的数据</p><p>拉一个PR</p><p>组长需要一一处理合并分支的请求</p></blockquote></li><li><p>第二天,组员接着开发,git pull origin master</p></li></ol><h2 id="个人git详细操作"><a href="#个人git详细操作" class="headerlink" title="个人git详细操作"></a>个人git详细操作</h2><p><img src="../img/git1.png" alt="图片"></p><p><img src="../img/git2.png" alt="图片"></p><p><img src="../img/git3.png" alt="图片"></p><h2 id="补充一下可能推送出现错误的补救措施"><a href="#补充一下可能推送出现错误的补救措施" class="headerlink" title="补充一下可能推送出现错误的补救措施"></a>补充一下可能推送出现错误的补救措施</h2><h3 id="错误信息："><a href="#错误信息：" class="headerlink" title="错误信息："></a>错误信息：</h3><p>当使用此命令 <code>$ git push origin master</code>时，它会显示一条错误消息。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! [rejected]        master -&gt; master (fetch first)</span><br><span class="line">error: failed to push some refs to &#x27;git@github.com:zapnaa/abcappp.git&#x27;</span><br></pre></td></tr></table></figure><h3 id="措施："><a href="#措施：" class="headerlink" title="措施："></a>措施：</h3><p>pull 始终是正确的方法，但当您尝试将非 Git 文件系统转换为 Github 存储库时可能会有一个例外。在那里你必须强制第一次提交。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git remote add origin https://github.com/userName/repoName.git</span><br><span class="line">git push --force origin master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务体系</title>
      <link href="/archives/2378dcd7.html"/>
      <url>/archives/2378dcd7.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="maven环境"><a href="#maven环境" class="headerlink" title="maven环境"></a>maven环境</h2><blockquote><ol><li>官方下载地址 - <a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a> - 解压缩即可</li><li>Apache下的项目,采用java语言开发的.计算机中要求已经<strong>预先安装好jdk</strong></li><li>强大的<strong>项目的构建工具</strong>以及项目中的<strong>依赖[jar]管理工具</strong></li><li>国外已经在逐步使用gradle[使用的是groovy语法]来替代maven.</li></ol></blockquote><h3 id="环境变量的配置"><a href="#环境变量的配置" class="headerlink" title="环境变量的配置"></a>环境变量的配置</h3><blockquote><p>右击计算机 - 高级 - 环境变量 - 定位到系统变量,接下来执行两个动作</p><ol><li><p><strong>新建</strong>变量名 MAVEN_HOME</p><p>变量值: maven的解压缩[根目录]的绝对路径</p></li><li><p>操作系统中内置了很多环境变量名,在系统变量中,查找一个变量名叫做path,点击<strong>编辑</strong></p><p>win8以下 - 所有的路径都是在一行中显示.  路径1;路径2;路径3**;%MAVEN_HOME%\bin**</p><p>win8及其以上 - 新建 - <strong>%MAVEN_HOME%\bin</strong></p></li></ol></blockquote><blockquote><p>所有的符号一定是英文模式下的符号.</p></blockquote><blockquote><p>所有的系统配置完毕之后,窗口点击确定,然后关闭所有的窗口.打开/重启 cmd</p></blockquote><h3 id="测试maven环境"><a href="#测试maven环境" class="headerlink" title="测试maven环境"></a>测试maven环境</h3><blockquote><ol><li>检查path是否已经配置了maven的绝对路径 - 在终端中输入<strong>path</strong></li><li>输入mvn -v</li></ol></blockquote><h2 id="为什么使用maven"><a href="#为什么使用maven" class="headerlink" title="为什么使用maven"></a>为什么使用maven</h2><blockquote><p>没有使用maven,就需要采用传统的方式一一去下载jar包,然后一一导入jar包到项目中.</p><p>弊端:</p><ol><li>找jar费时间 - 需要关注jar的版本问题</li><li>jar的版本是需要兼容的.</li><li>jar与jar之间存在依赖的关系的,有的时候删除一个jar,也会引发一系列的连锁反应.</li><li>手动维护项目中的这些依赖肯定是难以维护的</li><li>每个项目需要手动导入jar到lib目录,肯定是造成磁盘的容量的缩减的.</li></ol></blockquote><h2 id="修改maven镜像"><a href="#修改maven镜像" class="headerlink" title="修改maven镜像"></a>修改maven镜像</h2><blockquote><p>目的 - 就是为了提高下载jar的速度.使用的是阿里云镜像</p></blockquote><blockquote><ol><li><p>创建<strong>本地的仓库</strong>目录 - repo - 后面用来存放本地的jar</p></li><li><p>到C盘的用户主目录下去寻找一个.m2的目录,如果找不到则新建.</p></li><li><p>将setttings.xml文件直接放入到.m2目录中</p><p>需要修改成本地计算机中的repo的绝对路径D:/maven/repo</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/admin/Documents/success/d/apache-maven-3.3.9/repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirror</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span> </span><br><span class="line">          <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="搭建一个maven的java工程"><a href="#搭建一个maven的java工程" class="headerlink" title="搭建一个maven的java工程"></a>搭建一个maven的java工程</h1><blockquote><p><code>maven的工程的目录结构</code></p><ol><li><strong>src/main/java - 存储项目的源代码的目录</strong></li><li><strong>src/main/resources - 存储项目的配置文件的目录</strong></li><li><strong>src/test/java - 存储项目的单元测试的目录</strong></li><li>src/test/resources - 存储项目的测试时候需要的测试的配置文件</li></ol></blockquote><h1 id="POM坐标"><a href="#POM坐标" class="headerlink" title="POM坐标"></a>POM坐标</h1><ul><li>GroupId - 相当于包名[项目的根包],一般采用公司域名倒置 - com.baidu</li><li>ArtifactId - 相当于项目的名称 - mvn-tech</li><li>Version - 使用的是快照版本1.0-SNAPSHOT</li></ul><p><strong>pom.xml文件一旦修改了,那么pom.xml文件需要刷新才能生效的.</strong></p><h1 id="maven常用命令"><a href="#maven常用命令" class="headerlink" title="maven常用命令"></a>maven常用命令</h1><blockquote><ol><li><p>mvn compile - 编译项目.就会在项目的根目录下生成一个target目录,包含源代码的字节码文件[.class]</p><p>有的时候刷新pom.xml文件,没有生效[可能是网络中断],需要手动进行编译.<strong>编译的过程也会帮助我们去下载依赖</strong></p></li><li><p>mvn clean - 删除target目录</p></li><li><p>maven命令可以一起并用 - <strong>mvn clean compile</strong></p></li><li><p>mvn package - 打包</p><p>4-1. mvn package命令肯定是包含了mvn compile命令 - 也会生成target目录</p><p>4-2. 默认的打包命令会执行了单元测试的代码,一旦执行,可能造成数据的混乱 - 不合理的.</p></li><li><p>打包但是跳过单元测试 - 推荐</p><p>mvn package -Dmaven.test.skip=true</p><p>推荐<strong>mvn clean package -Dmaven.test.skip=true</strong></p><p>效果就是可以看到target - 出现了mvn-tech-1.0-SNAPSHOT.jar</p></li><li><p>mvn test - 执行所有的单元测试 </p><p>自动化的测试 - testng - 选择性去测试哪些方法.</p></li></ol></blockquote><h1 id="依赖添加"><a href="#依赖添加" class="headerlink" title="依赖添加"></a>依赖添加</h1><blockquote><p>比如项目中需要使用mysql的依赖了,需要百度搜索maven仓库</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>会将远程仓库的jar下载到本地仓库[repo目录],只要第一次下载成功之后,后面就是直接使用了[直接引用坐标].</p><p><strong>groupId,artifactId,version - 依赖的坐标</strong>,根据坐标找到它在本地仓库的位置.</p></blockquote><h1 id="父子工程"><a href="#父子工程" class="headerlink" title="父子工程"></a>父子工程</h1><blockquote><p>父工程和子模块</p><ol><li><p>子模块加上下面的配置之后,子模块默认会继承父工程中所有的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  指定一下sub01模块的父工程--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mvn-tech<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>考虑把各个子模块共用的依赖配置到父工程中.</p></li><li><p><strong>父工程除了可以存放共用的这些依赖,还可以来管理这些依赖的版本</strong></p><p>父工程</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!--  用来管理依赖的版本 - 父工程统一进行管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子模块</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父工程一旦对依赖的版本进行统一的管理之后,子工程默认是不会自动导入这些依赖的.</p><p>需要手动导入,但是可以不用加上version</p></li></ol></blockquote><h1 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h1><blockquote><p><strong>版本2.6.0</strong></p></blockquote><blockquote><p>早期完成一个web项目仅仅需要<strong>servelt技术</strong>即可.诞生了struts1.x和struts2.x这种第三方的mvc框架.</p><p>早期说的<strong>ssh</strong> - spring <strong>struts2.x</strong> <strong>hibernate</strong></p><p>struts本身也是一个项目,本身就漏洞百出,配置也比较繁琐.后来虽然也支持了注解的开发方式,但是依然很繁琐</p></blockquote><blockquote><p>并且由于struts框架不属于spring全家桶里面的产品,导致spring每次进行一个版本的升级,那么都是需要考虑和</p><p>struts的兼容性.所以springmvc技术诞生了,对比struts技术来讲,配置要简单一些,是因为springmvc本身就是属于</p><p>spring模块中的webmvc模块,属于spring全家桶中的产品,可以和spring产品无缝对接.</p><p>无论是struts还是<strong>springmvc</strong>本身都是属于mvc框架[是一种开发的思想],底层都是对传统的javaee技术-<strong>servlet技术</strong></p><p>的高级封装.</p><p><strong>但是springmvc目前又被springboot替代了.</strong></p><p><strong>hibernate是全自动的orm框架,对sql要求几乎没有.封装的特别完美,导致我们不能进行sql优化</strong> - 企业内部系统</p><p>但是mybatis是半自动的orm框架,仍然是需要手动写sql语句的.因此在互联网大数据时代,可以对sql进行优化 - 互联网项目</p></blockquote><blockquote><p>听过<strong>ssm</strong> - spring <strong>springmvc</strong> <strong>mybatis</strong></p></blockquote><blockquote><p>Spring全家桶技术</p></blockquote><h2 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h2><blockquote><ol><li>springboot作为<strong>微服务</strong>开发的首选</li><li>和springmvc对比的话,配置要更加简洁 - “零配置”</li><li>springboot提供了很多场景启动器 - 依赖的统一管理比springmvc还要方便.</li><li>涉及到<strong>springboot自动化的配置</strong> - 解释一下springboot自动化配置的原理</li></ol></blockquote><h2 id="搭建springboot工程"><a href="#搭建springboot工程" class="headerlink" title="搭建springboot工程"></a>搭建springboot工程</h2><blockquote><p>使用脚手架 - spring Initializr来快速搭建springboot工程</p></blockquote><h1 id="场景启动器"><a href="#场景启动器" class="headerlink" title="场景启动器"></a>场景启动器</h1><blockquote><ol><li>Developer Tools - 开发工具<ul><li>Spring Boot DevTools - 热部署</li><li>Lombok</li></ul></li><li>Web<ul><li><strong>Spring Web  √</strong> - web项目需要的最小配置</li></ul></li><li>SQL<ul><li><strong>Spring Data JPA - 持久层的框架</strong>√</li><li><strong>MyBatis Framework - mybatis框架</strong></li><li>MySQL Driver - mysql驱动</li></ul></li><li>NoSQL<ul><li>Spring Data Redis - redis相关的</li></ul></li><li>IO<ul><li><strong>Java Mail Sender - 邮件发送</strong></li></ul></li></ol></blockquote><h1 id="“依赖总管家”"><a href="#“依赖总管家”" class="headerlink" title="“依赖总管家”"></a>“依赖总管家”</h1><blockquote><p>利用脚手架新建的springboot工程,默认是继承了父工程</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>鼠标放在了spring-boot-starter-parent,ctrl单击</p></blockquote><blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>spring-boot-dependencies - “依赖总管家”,对常见的依赖都进行了一个统一版本的管理</p></blockquote><blockquote><p>项目的实际开发中如果需要引入一个新的依赖的时候</p><ol><li>优先先到”依赖总管家”去查找这个依赖是否被版本管理了,如果依赖管家中已经管理了,只需要拷贝过来,但是不需要加version</li><li>如果依赖总管家中没有对新的依赖的版本进行管理,那么我们就需要百度搜索 - maven仓库 - 找到对应的依赖,但是必须要加上version</li></ol></blockquote><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><blockquote><p><strong>项目中的配置文件也是一定交给”一位同学去管理的”</strong></p></blockquote><blockquote><p>src/main/resources - 存放springboot相关的配置文件</p><p>默认的是application**.properties文件**,优先级别是最高的.在springboot工程中推荐使用的是yml文件,使用的是<strong>yarn语法</strong></p><p><strong>无论是properties文件还是yml文件,它的命名一定是application,并且一定是放在了src/main/resources目录的根目录下 - “约定”</strong></p></blockquote><h2 id="配置文件的占位符"><a href="#配置文件的占位符" class="headerlink" title="配置文件的占位符"></a>配置文件的占位符</h2><blockquote><p>默认的端口号是8080</p></blockquote><blockquote><p>项目流程中涉及到多种环境,每个环境的配置可能有差别,需要给不同的环境单独创建不同的配置文件.配置文件的格式是有要求的</p><p><strong>application-{profile}.yml</strong></p><ol><li><p>开发环境 - application-dev.yml</p></li><li><p>测试环境 - application-test.yml</p></li><li><p>生产环境 - application-prod.yml</p></li><li><p><strong>即使配置了n个环境的配置文件,但是springboot工程始终认可的主配置文件仍然是application.yml</strong></p></li><li><p>需要在主配置文件application.yml文件中去指定我激活的文件</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">profiles:</span></span><br><span class="line">    <span class="attr">active:</span> <span class="string">dev</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h1 id="启动springboot工程"><a href="#启动springboot工程" class="headerlink" title="启动springboot工程"></a>启动springboot工程</h1><blockquote><ol><li>找到springboot的主入口程序</li></ol></blockquote><h1 id="打包部署"><a href="#打包部署" class="headerlink" title="打包部署"></a>打包部署</h1><blockquote><p>springboot内置了tomcat[服务器]</p><ol><li><p>打包mvn clean package -Dmaven.test.skip=true</p></li><li><p>将target下生成的baidu-boot-demo-0.0.1-SNAPSHOT.jar上传到远程的服务器上去[linux或者阿里云服务器]</p></li><li><p>进入到这个jar所在的目录</p><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">java -jar baidu-boot-demo-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar</span><br></pre></td></tr></table></figure></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 资料 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QuickStart_newPost</title>
      <link href="/archives/3afc68d7.html"/>
      <url>/archives/3afc68d7.html</url>
      
        <content type="html"><![CDATA[<h5 id="新建一篇文章"><a href="#新建一篇文章" class="headerlink" title="新建一篇文章"></a>新建一篇文章</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br></pre></td></tr></table></figure><h5 id="在本地进行运行"><a href="#在本地进行运行" class="headerlink" title="在本地进行运行"></a>在本地进行运行</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br><span class="line">或者简写成</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><h5 id="清楚缓存"><a href="#清楚缓存" class="headerlink" title="清楚缓存"></a>清楚缓存</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">或者简写成</span><br><span class="line">hexo cl</span><br></pre></td></tr></table></figure><h5 id="生成静态网页"><a href="#生成静态网页" class="headerlink" title="生成静态网页"></a>生成静态网页</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">或者简写成</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>小技巧：</p><ul><li><p>当你在本地预览时想要不输入输入以下繁琐的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean hexo generate hexo server</span><br></pre></td></tr></table></figure><p>就可以在<strong>package.json</strong>中修改以下内容</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;:</span> &#123;</span><br><span class="line"> <span class="attr">&quot;build&quot;:</span> <span class="string">&quot;hexo generate&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;clean&quot;:</span> <span class="string">&quot;hexo clean&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;deploy&quot;:</span> <span class="string">&quot;hexo deploy&quot;</span>,</span><br><span class="line"> <span class="attr">&quot;server&quot;:</span> <span class="string">&quot;hexo clean &amp;&amp; hexo generate &amp;&amp; hexo server&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后直接在控制台上输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></li></ul><h5 id="发布到自己的网站上"><a href="#发布到自己的网站上" class="headerlink" title="发布到自己的网站上"></a>发布到自己的网站上</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br><span class="line">或者简写成</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new &quot;My New Post&quot;</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 指令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QuickStart </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
